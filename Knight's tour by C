#include <stdio.h>
#include <time.h>

#define X 8
#define Y 8

int chess[X][Y];
// at most 8 possibilities
int nextxy(int *x, int *y, int count)
{
    switch(count)
    {
        case 0:
            if(*x + 2 <= X-1 && *y - 1 >= 0 && chess[*x+2][*y-1]==0)
            {
                *x += 2;
                *y -= 1;
                return 1;
            }
            break;
        case 1:
            if(*x+2<=X-1 && *y+1<=Y-1 && chess[*x+2][*y+1]==0)
            {
                *x += 2;
                *y += 1;
                return 1;
            }
            break;
        case 2:
            if(*x+1<=X-1 && *y-2>=0 && chess[*x+1][*y-2]==0)
            {
                *x += 1;
                *y -= 2;
                return 1;
            }
            break;
        case 3:
             if(*x+1<=X-1 && *y+2<=Y-1 && chess[*x+1][*y+2]==0)
            {
                *x += 1;
                *y += 2;
                return 1;
            }
            break;
        case 4:
             if(*x-2>=0 && *y-1>=0 && chess[*x-2][*y-1]==0)
            {
                *x -= 2;
                *y -= 1;
                return 1;
            }
            break;
        case 5:
             if(*x-2>=0 && *y+1<=Y-1 && chess[*x-2][*y+1]==0)
            {
                *x -= 2;
                *y += 1;
                return 1;
            }
            break;
        case 6:
             if(*x-1>=0 && *y-2>=0 && chess[*x-1][*y-2]==0)
            {
                *x -= 1;
                *y -= 2;
                return 1;
            }
            break;
        case 7:
             if(*x-1>=0 && *y+2<=Y-1 && chess[*x-1][*y+2]==0)
            {
                *x -= 1;
                *y += 2;
                return 1;
            }
            break;

        default:
            break;

    }
    return 0;
}

void print()
{
    int i, j;

    for(i=0; i<X; i++)
    {
        for(j=0; j<Y; j++)
        {
             printf("%2d\t", chess[i][j]);
        }
        printf("\n");
    }
}

// travel around the board
//(x, y)as start
//tag add 1 after one step
int TravelChessBoard(int x, int y, int tag)
{
    int x1 = x, y1 = y, flag = 0, count = 0;
    chess[x][y] = tag;

    if(X*Y == tag)
    {
        // print board
        print();
        return 1;
    }

    flag = nextxy(&x1, &y1, count);
    while(flag ==0 && count < 7)
    {
        count++;
        flag = nextxy(&x1, &y1, count);
    }

    while(flag)
    {
        if(TravelChessBoard(x1, y1, tag+1))
        {
            return 1;
        }

        //continue to find in another count
        x1 = x;
        y1 = y;
        count++;

        flag = nextxy(&x1, &y1, count);
    }
    if(0 == flag)
    {
        chess[x][y] = 0;
    }

    return 0;
}

int main()
{
    int i,j;
    clock_t start, finish;

    start = clock();

    for(i=0; i<X; i++)
    {
        for(j=0; j<Y; j++)
        {
            chess[i][j] = 0;
        }
    }
    //TravelChessBoard(2, 0, 1);
    if(!TravelChessBoard(2, 1, 1))
    {
        printf("Sorry, failed");
    }
    finish = clock();
    printf("The time is %fs\n", (double)(finish - start)/CLOCKS_PER_SEC);
    return 0;
}
